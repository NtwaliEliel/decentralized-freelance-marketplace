{"ast":null,"code":"var _jsxFileName = \"/Users/macbook/Documents/PERSONAL_PROJECTS/Refonte Projects/decentralized-freelance-marketplace/frontend/src/contexts/WalletContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { BrowserProvider } from 'ethers';\n\n// Declare window.ethereum type\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WalletContext = /*#__PURE__*/createContext({\n  account: null,\n  connect: async () => {},\n  disconnect: () => {},\n  isConnecting: false\n});\nexport const useWallet = () => {\n  _s();\n  return useContext(WalletContext);\n};\n_s(useWallet, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const WalletProvider = ({\n  children\n}) => {\n  _s2();\n  const [account, setAccount] = useState(null);\n  const [isConnecting, setIsConnecting] = useState(false);\n  const connect = async () => {\n    if (typeof window.ethereum === 'undefined') {\n      alert('Please install MetaMask to use this feature');\n      return;\n    }\n    try {\n      setIsConnecting(true);\n      const provider = new BrowserProvider(window.ethereum);\n      await provider.send('eth_requestAccounts', []);\n      const signer = await provider.getSigner();\n      const address = await signer.getAddress();\n      setAccount(address);\n    } catch (error) {\n      console.error('Error connecting wallet:', error);\n    } finally {\n      setIsConnecting(false);\n    }\n  };\n  const disconnect = () => {\n    setAccount(null);\n  };\n  useEffect(() => {\n    // Check if already connected\n    if (typeof window.ethereum !== 'undefined') {\n      const provider = new BrowserProvider(window.ethereum);\n      provider.listAccounts().then(accounts => {\n        if (accounts.length > 0) {\n          setAccount(accounts[0]);\n        }\n      });\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(WalletContext.Provider, {\n    value: {\n      account,\n      connect,\n      disconnect,\n      isConnecting\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n};\n_s2(WalletProvider, \"kOkCqqJ14oksp5tccFqlJtyVCag=\");\n_c = WalletProvider;\nvar _c;\n$RefreshReg$(_c, \"WalletProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","BrowserProvider","jsxDEV","_jsxDEV","WalletContext","account","connect","disconnect","isConnecting","useWallet","_s","WalletProvider","children","_s2","setAccount","setIsConnecting","window","ethereum","alert","provider","send","signer","getSigner","address","getAddress","error","console","listAccounts","then","accounts","length","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/macbook/Documents/PERSONAL_PROJECTS/Refonte Projects/decentralized-freelance-marketplace/frontend/src/contexts/WalletContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { BrowserProvider, JsonRpcSigner } from 'ethers';\n\n// Declare window.ethereum type\ndeclare global {\n  interface Window {\n    ethereum?: {\n      request: (args: { method: string; params?: any[] }) => Promise<any>;\n      on: (event: string, callback: (accounts: string[]) => void) => void;\n      removeListener: (event: string, callback: (accounts: string[]) => void) => void;\n    };\n  }\n}\n\ninterface WalletContextType {\n  account: string | null;\n  connect: () => Promise<void>;\n  disconnect: () => void;\n  isConnecting: boolean;\n}\n\nconst WalletContext = createContext<WalletContextType>({\n  account: null,\n  connect: async () => {},\n  disconnect: () => {},\n  isConnecting: false,\n});\n\nexport const useWallet = () => useContext(WalletContext);\n\nexport const WalletProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [account, setAccount] = useState<string | null>(null);\n  const [isConnecting, setIsConnecting] = useState(false);\n\n  const connect = async () => {\n    if (typeof window.ethereum === 'undefined') {\n      alert('Please install MetaMask to use this feature');\n      return;\n    }\n\n    try {\n      setIsConnecting(true);\n      const provider = new BrowserProvider(window.ethereum);\n      await provider.send('eth_requestAccounts', []);\n      const signer = await provider.getSigner();\n      const address = await signer.getAddress();\n      setAccount(address);\n    } catch (error) {\n      console.error('Error connecting wallet:', error);\n    } finally {\n      setIsConnecting(false);\n    }\n  };\n\n  const disconnect = () => {\n    setAccount(null);\n  };\n\n  useEffect(() => {\n    // Check if already connected\n    if (typeof window.ethereum !== 'undefined') {\n      const provider = new BrowserProvider(window.ethereum);\n      provider.listAccounts().then((accounts: string[]) => {\n        if (accounts.length > 0) {\n          setAccount(accounts[0]);\n        }\n      });\n    }\n  }, []);\n\n  return (\n    <WalletContext.Provider value={{ account, connect, disconnect, isConnecting }}>\n      {children}\n    </WalletContext.Provider>\n  );\n}; "],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC7E,SAASC,eAAe,QAAuB,QAAQ;;AAEvD;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAkBA,MAAMC,aAAa,gBAAGP,aAAa,CAAoB;EACrDQ,OAAO,EAAE,IAAI;EACbC,OAAO,EAAE,MAAAA,CAAA,KAAY,CAAC,CAAC;EACvBC,UAAU,EAAEA,CAAA,KAAM,CAAC,CAAC;EACpBC,YAAY,EAAE;AAChB,CAAC,CAAC;AAEF,OAAO,MAAMC,SAAS,GAAGA,CAAA;EAAAC,EAAA;EAAA,OAAMZ,UAAU,CAACM,aAAa,CAAC;AAAA;AAACM,EAAA,CAA5CD,SAAS;AAEtB,OAAO,MAAME,cAAuD,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EACvF,MAAM,CAACR,OAAO,EAAES,UAAU,CAAC,GAAGf,QAAQ,CAAgB,IAAI,CAAC;EAC3D,MAAM,CAACS,YAAY,EAAEO,eAAe,CAAC,GAAGhB,QAAQ,CAAC,KAAK,CAAC;EAEvD,MAAMO,OAAO,GAAG,MAAAA,CAAA,KAAY;IAC1B,IAAI,OAAOU,MAAM,CAACC,QAAQ,KAAK,WAAW,EAAE;MAC1CC,KAAK,CAAC,6CAA6C,CAAC;MACpD;IACF;IAEA,IAAI;MACFH,eAAe,CAAC,IAAI,CAAC;MACrB,MAAMI,QAAQ,GAAG,IAAIlB,eAAe,CAACe,MAAM,CAACC,QAAQ,CAAC;MACrD,MAAME,QAAQ,CAACC,IAAI,CAAC,qBAAqB,EAAE,EAAE,CAAC;MAC9C,MAAMC,MAAM,GAAG,MAAMF,QAAQ,CAACG,SAAS,CAAC,CAAC;MACzC,MAAMC,OAAO,GAAG,MAAMF,MAAM,CAACG,UAAU,CAAC,CAAC;MACzCV,UAAU,CAACS,OAAO,CAAC;IACrB,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAClD,CAAC,SAAS;MACRV,eAAe,CAAC,KAAK,CAAC;IACxB;EACF,CAAC;EAED,MAAMR,UAAU,GAAGA,CAAA,KAAM;IACvBO,UAAU,CAAC,IAAI,CAAC;EAClB,CAAC;EAEDd,SAAS,CAAC,MAAM;IACd;IACA,IAAI,OAAOgB,MAAM,CAACC,QAAQ,KAAK,WAAW,EAAE;MAC1C,MAAME,QAAQ,GAAG,IAAIlB,eAAe,CAACe,MAAM,CAACC,QAAQ,CAAC;MACrDE,QAAQ,CAACQ,YAAY,CAAC,CAAC,CAACC,IAAI,CAAEC,QAAkB,IAAK;QACnD,IAAIA,QAAQ,CAACC,MAAM,GAAG,CAAC,EAAE;UACvBhB,UAAU,CAACe,QAAQ,CAAC,CAAC,CAAC,CAAC;QACzB;MACF,CAAC,CAAC;IACJ;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,oBACE1B,OAAA,CAACC,aAAa,CAAC2B,QAAQ;IAACC,KAAK,EAAE;MAAE3B,OAAO;MAAEC,OAAO;MAAEC,UAAU;MAAEC;IAAa,CAAE;IAAAI,QAAA,EAC3EA;EAAQ;IAAAqB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACa,CAAC;AAE7B,CAAC;AAACvB,GAAA,CA7CWF,cAAuD;AAAA0B,EAAA,GAAvD1B,cAAuD;AAAA,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}